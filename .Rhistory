## first add a grid ID datum
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
str(joined.data) ## looks like that worked too!
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
head(merged.data)
merged.data$geometry <- NULL
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
head(merged.data)
merged.data.sf <- st_as_sf(merged.data)?
## okay so next step is probably to write this all into a function that just takes the data locations
## as an argument and spits out a data frame like this, perhaps trimmed down to the relevant points
## Also need to add in the rest of the data!
## calculate raster of distances: example
##Import Data
riverdata <- read.csv("RiverPoints_21097.csv") #points on the river
merged.data.sf <- st_as_sf(merged.data)
merged.data.sf
observation_polygons <- st_as_sf(merged.data)
roaddistances <- extract(roadraster, observation_polygons, method='simple', fun=mean)
roadraster <- raster("roadraster.tif")
roadraster <- raster("roadraster.tif")
roaddistances <- extract(roadraster, observation_polygons, method='simple', fun=mean)
## at processing large files, but its annoying me so...
#use the create grid output from above to make raster. it calculates points, then distance from points to object, then turn to raster
#make raster dataset
build_raster <- function(rastergrid = raster_grid, obsdata, coorddata) {
combinedobs <- st_combine(obsdata)  ## this step removes individual dam data. this step is important, otherwise it will calculate distance between each grid center and each obs (single geomoetry object. all water should be treated )
distancevals <- st_distance(combinedobs, rastergrid) ## this is going to take a while. dsitance between 2 arguments (combined geo and raster grid)-
#length(distance_vals) == length(raster_grid) ## check to make sure length is correct
#head(distance_vals) ## seems like at least reasonable numbers
coorddata <- st_coordinates(rastergrid) ## attach distance and spatial data to a data.frame. In all honesty I don't know why
## I have to do it this way, but its the only way I can get it to work so I'm not gonna question
distancedata <- data.frame(distance = as.vector(distancevals), coorddata)
distsf <- st_as_sf(distancedata, coords = c("X", "Y"), crs = "+init=epsg:21097")
r <- raster(resolution = 20, extent(sample_grid), crs = "+init=epsg:21097") ## create an empty raster layer with same spatial extent as the grid
#res(r) ## check resolution, should be 3m x 3m
return(rasterize(distsf, r, "distance", fun = mean)) ## convert to raster object
}
head(roaddistances)
class(roaddistances)
head(observation_polygons)
observation_polygons_df <- as.data.frame(observation_polygons)
observation_polygons_df$distanceRoad = roaddistances
head(observation_polygons_df)
riverdistances <- extract(riverraster, observation_polygons, method='simple', fun=mean())
riverdistances <- extract(riverraster, observation_polygons, method='simple', fun=mean)
head(riverdistances)
observation_polygons_df$distanceRiver = riverdistances
head(observation_polygons_df)
## first add a grid ID datum
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
merged.data$geometry <- "Unused Points"
head(merged.data)
## first add a grid ID datum
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
colnames(merged.data)[which(names(merged.data) == "geometry")] <- "Unused Points"
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
head(merged.data)
st_as_sf?
df.kernel()
st_as_sf(merged.data, coords = 25)
st_as_sf(merged.data, coords = 24)
st_as_sf(merged.data)
point_names <- subset(merged.data, select=geometry)
## first add a grid ID datum
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
point_names <- subset(merged.data, select=geometry)
head(point_names)
merged.data$geometry -> NULL
merged.data$geometry = NULL
head(merged.data)
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
observation_polygons <- st_as_sf(merged.data)
observation_polygons
class(observation_polygons)
merge(observation_polygons, point_names)
class(point_names)
merge(observation_polygons, point_names, all = TRUE)
right_join(observation_polygons, point_names)
observation_polygons$obs.points = point_names
observation_polygons
roaddistances <- extract(roadraster, observation_polygons, method='simple', fun=mean)
observation_polygons_df <- as.data.frame(observation_polygons)
observation_polygons_df$distanceRoad = roaddistances
head(observation_polygons_df)
#Overall function once distance is fixed.
find_distances <- function(observationdata, riverraster, roadraster, sample_grid) {
observationdata <- observationdata[observation.data$Y > 0,] ## get rid of funky 0s, not sure what thats about
## define coordinates
coords <- observation.data
coordinates(coords) <- c(X ="X", Y="Y") ## convert to spatialPoints object
proj4string(coords) <- CRS("+init=epsg:21097")
obs <- st_as_sf(coords) ## convert to sf object
obs <- st_transform(obs, 32637) ## transorm to UTM so we can work in meters instead of DDs
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
point_names <- subset(merged.data, select=geometry)
merged.data$geometry = NULL
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
observation_polygons <- st_as_sf(merged.data)
observation_polygons$obs.points = point_names
obsriverdistance <- extract(riverraster, observation_polygons, method='simple', fun=mean)
obsroaddistance <- extract(roadraster, observation_polygons, method='simple', fun=mean)
observation_polygons_df <- as.data.frame(observation_polygons)
#add column to dataframe with water distance
observation_polygons_df$riverDistance=obsriverdistance
observation_polygons_df$roadDistance=obsroaddistance
return(observation_polygons, observation_polygons_df, sample_grid)
}
find_distances(obs, riverraster, roadroaster, sample_grid)
observationdata <- observationdata[observationdata$Y > 0,] ## get rid of funky 0s, not sure what thats about
#Overall function once distance is fixed.
find_distances <- function(observationdata, riverraster, roadraster, sample_grid) {
observationdata <- observationdata[observationdata$Y > 0,] ## get rid of funky 0s, not sure what thats about
## define coordinates
coords <- observation.data
coordinates(coords) <- c(X ="X", Y="Y") ## convert to spatialPoints object
proj4string(coords) <- CRS("+init=epsg:21097")
obs <- st_as_sf(coords) ## convert to sf object
obs <- st_transform(obs, 32637) ## transorm to UTM so we can work in meters instead of DDs
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
point_names <- subset(merged.data, select=geometry)
merged.data$geometry = NULL
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
observation_polygons <- st_as_sf(merged.data)
observation_polygons$obs.points = point_names
obsriverdistance <- extract(riverraster, observation_polygons, method='simple', fun=mean)
obsroaddistance <- extract(roadraster, observation_polygons, method='simple', fun=mean)
observation_polygons_df <- as.data.frame(observation_polygons)
#add column to dataframe with water distance
observation_polygons_df$riverDistance=obsriverdistance
observation_polygons_df$roadDistance=obsroaddistance
return(observation_polygons, observation_polygons_df, sample_grid)
}
find_distances(obs, riverraster, roadroaster, sample_grid)
#Overall function once distance is fixed.
find_distances <- function(observationdata, riverraster, roadraster, sample_grid) {
observationdata <- observationdata[observationdata$Y > 0,] ## get rid of funky 0s, not sure what thats about
## define coordinates
coords <- observationdata
coordinates(coords) <- c(X ="X", Y="Y") ## convert to spatialPoints object
proj4string(coords) <- CRS("+init=epsg:21097")
obs <- st_as_sf(coords) ## convert to sf object
obs <- st_transform(obs, 32637) ## transorm to UTM so we can work in meters instead of DDs
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
point_names <- subset(merged.data, select=geometry)
merged.data$geometry = NULL
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
observation_polygons <- st_as_sf(merged.data)
observation_polygons$obs.points = point_names
obsriverdistance <- extract(riverraster, observation_polygons, method='simple', fun=mean)
obsroaddistance <- extract(roadraster, observation_polygons, method='simple', fun=mean)
observation_polygons_df <- as.data.frame(observation_polygons)
#add column to dataframe with water distance
observation_polygons_df$riverDistance=obsriverdistance
observation_polygons_df$roadDistance=obsroaddistance
return(observation_polygons, observation_polygons_df, sample_grid)
}
find_distances(obs, riverraster, roadroaster, sample_grid)
## read data
data <- read.csv("sightings.csv")
find_distances(data, riverraster, roadroaster, sample_grid)
roadraster <- raster("roadraster.tif")
riverraster <- raster("riverraster.tif")
find_distances(data, riverraster, roadroaster, sample_grid)
find_distances(data, riverraster, roadraster, sample_grid)
return(observation_polygons_df)
#Overall function once distance is fixed.
find_distances <- function(observationdata, riverraster, roadraster, sample_grid) {
observationdata <- observationdata[observationdata$Y > 0,] ## get rid of funky 0s, not sure what thats about
## define coordinates
coords <- observationdata
coordinates(coords) <- c(X ="X", Y="Y") ## convert to spatialPoints object
proj4string(coords) <- CRS("+init=epsg:21097")
obs <- st_as_sf(coords) ## convert to sf object
obs <- st_transform(obs, 32637) ## transorm to UTM so we can work in meters instead of DDs
sample_grid$gridID = seq(1, nrow(sample_grid), by = 1)
grid_data <- as.data.frame(sample_grid)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data <- as.data.frame(joined.data)
merged.data <- merge(joined.data, grid_data, by="gridID")
point_names <- subset(merged.data, select=geometry)
merged.data$geometry = NULL
colnames(merged.data)[which(names(merged.data) == "x")] <- "geometry"
observation_polygons <- st_as_sf(merged.data)
observation_polygons$obs.points = point_names
obsriverdistance <- extract(riverraster, observation_polygons, method='simple', fun=mean)
obsroaddistance <- extract(roadraster, observation_polygons, method='simple', fun=mean)
observation_polygons_df <- as.data.frame(observation_polygons)
#add column to dataframe with water distance
observation_polygons_df$river_distance=obsriverdistance
observation_polygons_df$road_distance=obsroaddistance
return(observation_polygons_df)
}
find_distances(data, riverraster, roadraster, sample_grid)
head(observation_polygons_df)
river_and_road_data <- find_distances(data, riverraster, roadraster, sample_grid)
write.CSV(river_and_road_data, "river_and_road.csv")
write.csv(river_and_road_data, "river_and_road.csv")
## create grid object
grid <- st_make_grid(x = buffer,
cellsize = grid.size,
offset = offset,
what = "centers", ## want output to be spatial object
square = TRUE ## could do hexagons ?
)
create_dam_grid <- function(buffer, grid.size = 100, random = FALSE, offset.mean = NA, offset.sd = NA) {
## error checking
if (random == TRUE & any(is.na(c(offset.mean, offset.sd)))) {
print("Error: must supply mean and sd for random offset")
return()
}
## if random offset desired, create offset
if (random == TRUE) {
lower.left <- st_bbox(buffer)[c("xmin", "ymin")] ## get lower left extent of obs
offset <- lower.left - abs(rnorm(2, offset.mean, offset.sd))
}
else offset <- st_bbox(buffer)[c("xmin", "ymin")]
## create grid object
grid <- st_make_grid(x = buffer,
cellsize = grid.size,
offset = offset,
what = "centers", ## want output to be spatial object
square = TRUE ## could do hexagons ?
)
grid <- st_as_sf(grid)
return(grid)
}
dam_grid <- create_dam_grid(bufferobs, grid.size = 400, random = TRUE, offset.mean = 10, offset.sd = 5)
plot(dam_grid)
damdata <- read.csv("MpalaWaterPoints.csv") #dam points (should we include the river access points here?)
watercoords <- damdata
coordinates(watercoords) <- c(X = "xcoord", Y="ycoord")
proj4string(watercoords) <- CRS("+init=epsg:21097")
damdata <- read.csv("MpalaWaterPoints.csv") #dam points (should we include the river access points here?)
damdata <- damdata[complete.cases(damdata), ] #removing lass row
watercoords <- damdata
coordinates(watercoords) <- c(X = "xcoord", Y="ycoord")
proj4string(watercoords) <- CRS("+init=epsg:21097")
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, watercoords, join=st_nearest_feature, left=TRUE)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(watercoords, dam_grid, join=st_nearest_feature, left=TRUE)
class(watercoords)
class(dam_grid)
dam_spatial <- as(st_geometry(dam_spatial), "Spatial")
dam_spatial <- as(st_geometry(dam_grid), "Spatial")
dam_spatial <- as(dam_spatial, "SpatialPolygonsDataFrame")
dam_spatial <- as(dam_spatial, "SpatialPointsDataFrame")
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, watercoords, join=st_nearest_feature, left=TRUE)
water_sf <- st_as_sf(watercoords)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, watercoords, join=st_nearest_feature, left=TRUE)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_spatial, watercoords, join=st_nearest_feature, left=TRUE)
dam_sf <- st_as_sf(dam_spatial)
dam_sf <- st_as_sf(dam_grid)
dam_sf <- st_as_sf(dam_grid)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_spatial, watercoords, join=st_nearest_feature, left=TRUE)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_spatial, water_sf, join=st_nearest_feature, left=TRUE)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_sf, water_sf, join=st_nearest_feature, left=TRUE)
crs(dam_sf)
set_crs?
kdf
water_sf
st_crs(dam_sf) = 21097
st_transform(dam_sf) = 21097
proj4string(dam_sf) <- CRS("+init=epsg:21097")
class(dams_sf)
class(dam_sf)
class(watercoords)
proj4string(dam_spatial) <- CRS("+init=epsg:21097")
dam_spatial
dam_sf <- st_as_sf(dam_spatial)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_spatial, water_sf, join=st_nearest_feature, left=TRUE)
dam_sf <- st_as_sf(dam_spatial)
class(dam_grid)
proj4string(dam_grid) <- CRS("+init=epsg:21097")
st_crs(dam_grid
)
st_transform_proj(dam_grid, "+init=21097")
st_transform_proj(dam_grid, proj4string = "+init=21097")
st_transform_proj(structure(dam_grid, proj4string = "+init = epsg:4326"), "+init= epsg:21097")
st_transform_proj(structure(dam_grid, proj4string = "+init = epsg:4326"), "+init= epsg:21097")
st_transform_proj(dam_grid, proj4string = "+init=epsg:21097")
st_transform_proj(dam_grid, crs = 21097)
st_transform(dam_grid, 21097)
watercoords <- damdata
coordinates(watercoords) <- c(X = "xcoord", Y="ycoord")
proj4string(watercoords) <- CRS("+init=epsg:21097")
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, watercoords, join=st_nearest_feature, left=TRUE)
water_sf <- st_as_sf(watercoords)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, watercoords, join=st_nearest_feature, left=TRUE)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, water_sf, join=st_nearest_feature, left=TRUE)
water_sf
dam_grid
proj4string(dam_grid) <- CRS("+init=epsg:21097 +proj=utm +zone=37 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs")
newDamGrid <- spTransform(dam_grid, projstring(water_sf))
newDamGrid <- spTransform(dam_grid, proj4string(water_sf))
newDamGrid <- spTransform(dam_grid, proj4string(watercoords))
crs(dam_grid)
dam_grid <- create_dam_grid(bufferobs, grid.size = 400, random = TRUE, offset.mean = 10, offset.sd = 5)
crs(dam_grid)
head(dam_grid)
st_transform_proj(dam_grid, "+init=epsg:4326")
st_transform_proj(dam_grid, "+init=epsg:21097")
st_transform_proj(dam_grid, "+proj=utm +zone=37")
st_transform_proj(dam_grid, "+init=epsg:21097 +proj=utm +zone=37 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs")
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, water_sf, join=st_nearest_feature, left=TRUE)
st_crs(dam_grid)
st_crs(water_sf)
dam_grid <- st_transform_proj(dam_grid, "+init=epsg:21097 +proj=utm +zone=37 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs")
st_crs(dam_grid
)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
st_join(dam_grid, water_sf, join=st_nearest_feature, left=TRUE)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
dam_grid$gridID = seq(1, nrow(sample_grid), by = 1)
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
dam_grid$gridID = seq(1, nrow(dam_grid), by = 1)
dam_grid <- st_transform_proj(dam_grid, "+init=epsg:21097 +proj=utm +zone=37 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs")
st_join(dam_grid, water_sf, join=st_nearest_feature, left=TRUE)
joined.data <- st_join(obs, sample_grid, join = st_within, left = TRUE)
joined.data
head(river_and_road_data)
nearest_dam <- st_join(dam_grid, water_sf, join=st_nearest_feature, left=TRUE)
river_road_water <- merge(river_and_road_data, nearest_dam, by="gridID")
head(river_road_water)
river_road_water.columns.values[24] = "Observation Coords"
river_road_water[24] = "Observation Coords"
river_road_water[24]
river_road_water[[24]]
river_road_water <- merge(river_and_road_data, nearest_dam, by="gridID")
names(newprice)[24]
names(river_road_water)[24]
head(river_road_water)
write.csv(river_road_water, "river_road_water_data.csv")
waterraster <- raster("waterraster.tif")
observation_polygons
Adding dam distances:
obswaterdistance <- extract(waterraster, observation_polygons, method='simple', fun=mean)
river_road_water$water_distance=obswaterdistance
dim(river_and_road_data)
dim(river_and_water)
dim(river_road_water)
dim(dam_grid
)
dim(nearest_dam)
dim(river_and_road_data)
river_road_water <- merge(river_and_road_data, nearest_dam, by="gridID")
dim(river_road_water)
pd.merge(river_and_road_data, nearest_dam, on='gridID', how='left').fillna(0)
river_road_water <- merge(river_and_road_data, nearest_dam, by="gridID", all.x = TRUE)
dim(river_road_water
)
river_road_water$water_distance=obswaterdistance
head(river_road_water)
p <- ggplot(river_road_water, aes(Water.Depth..m., water_distance))
p + facet_grid(vars(Species))
p <- ggplot(river_road_water, aes(Water.Depth..m., water_distance, colour = Species))
p + facet_wrap(vars(Species))
p <- ggplot(river_road_water, aes(Water.Depth..m., water_distance, colour = Species)) + geom_point()
p + facet_wrap(vars(Species))
write.csv(river_road_water, "river_road_water_data.csv")
waterobs
waterobs <- st_transform(st_as_sf(watercoords), 32637) ## convert to sf object
st_distance(waterobs, sightings)
install.packages(data.table)
install.packages("data.table")
library(data.table)
dt_test <- setDT(river_road_water)
head(dt_test)
dt_test
dt_test <- as.data.table(river_road_water)
head(river_road_water)
river_road_water
#st_join(sample_grid_object, dam points, join=st_nearest_feature, left=TRUE)
#gives you nearest dam to every grid id. gives you all grid ids and feature of dam data set
#merge to bigger dataset with grid based on grid id
#we might have to create a separate grid object with centers as points (what = centers) and make sure grid id's are equal
dam_grid <- create_dam_grid(bufferobs, grid.size = 400, random = TRUE, offset.mean = 10, offset.sd = 5)
dam_grid$gridID = seq(1, nrow(dam_grid), by = 1)
dam_grid <- st_transform_proj(dam_grid, "+init=epsg:21097 +proj=utm +zone=37 +ellps=clrk80 +towgs84=-160,-6,-302,0,0,0,0 +units=m +no_defs")
water_sf <- st_as_sf(watercoords)
nearest_dam <- st_join(dam_grid, water_sf, join=st_nearest_feature, left=TRUE)
river_road_waterID <- merge(river_and_road_data, nearest_dam, by="gridID", all.x=TRUE)
head(river_road_waterID)
river_road_water$water_distance=obswaterdistance
river_road_waterID$water_distance=obswaterdistance
head(river_road_waterID)
dt_test <- setDT(river_road_waterID)
head(river_road_waterID)
river_road_waterID <- merge(river_and_road_data, nearest_dam, by="gridID", all.x=TRUE)
river_road_waterID$water_distance=obswaterdistance
##Adding date info
read.csv("DamLevelsID.csv")
##Adding date info
read.csv("DamLevels_ID.csv")
##Adding date info
read.csv("DamLevels_ID.csv")
##Adding date info
damlevels_data <- read.csv("DamLevels_ID.csv")
##Adding date info
colnames(river_road_water)[which(names(merged.data) == "Number")] <- "ID"
z <- lapply(intersect(damlevels_data$ID,river_road_waterID$ID),function(id) {
d1 <- subset(damlevels_data,ID==id)
d2 <- subset(river_road_waterID,ID==id)
d1$indices <- sapply(d1$dateTarget,function(d) which.min(abs(d2$dateTarget - d)))
d2$indices <- 1:nrow(d2)
merge(d1,d2,by=c('ID','indices'))
})
z2 <- do.call(rbind,z)
z2$indices <- NULL
print(z2)
setDR(river_road_water)[, join_date := VISIT_DATE]
setDT(river_road_water)[, join_date := VISIT_DATE]
river_road_nomulti <- river_road_waterID
river_road_nomulti$geometry <- NULL
head(river_road_nomulti)
write.csv(river_road_nomulti, "riverroadtest.csv")
river_road_waterID[[24]]
river_road_waterID[[25]]
riverroadwaterID[[27]]
river_road_waterID[[27]]
head(river_road_waterID)
dim(river_road_waterID)
class(river_road_waterID)
river_road_nomulti <- river_road_waterID
setDT(river_road_nomulti)
